/**
 * 목표
 * 
 * 기본 데이터 타입 확인하기
 * 
 */
package ch05_datatype;

public class Test01 {
	public static void main(String[] args) {
		
/*타입 변수명 :		
-기본형 : 내가 필요한 값이 나한테 있다.
  숫자 : 정수와 실수. int, long, byte, short는 이제 사용X // double, float
  문자 : char
  논리 : 참과 거짓 boolean
  => 소문자로 시작한다, 형태 그대로만 사용가능. 추가를 못한다
  
-참조형 : 필요한 값이 다른 공간에 있다. 누군가를 가르키고 있는 형태 위치를 갖고있다
        기본형 빼고 다 참조형. 무한대이다. 직접 만들 수 있어서.. 
        대표타입 *class*   Random...		
        => 대문자로 시작한다
*/
		
		//기본형 데이터 중에서 정수 담는 타입 : 담을 수 있는 값의 크기가 다르다
		//byte = 1b, short = 2byte, int = 4byte, long = 8byte
		//1byte = 8bit, bit = 0과 1의 값을 담을 수 있다.
		byte b = 127; //-2^7 ~ 2^7 -1 까지 가능. 128을 넣으면 바이트가 담을 수 있는 크기를 넘어 에러가 난다
		short s = 100;
		int i = 100;
		long l = 100;
		l = 100l; //숫자뒤에 l, L을 붙여야 long
		l = 100L; //l은 가독성이 안좋아 대문자 L을 권장.
//		l = 3_000_000_000; 정수에 아무것도 붙이지 않으면 int로 처리. int의 범위를 넘어서 에러가 난다
		l = 3_000_000_000L;
		
		
		//실수 타입
		float f = 1.1f; //숫자 뒤에 f, F를 붙여야한다. 숫자만X
		double d = 1.1; //실수에 아무것도 붙이지 않으면 기본이 double
		d = 100;        //int로 인식하려고 한다. 가끔 double형으로 사용하고 싶을 때가 있다.
		d = 100d;       //숫자 뒤에 d나 D를 붙이면 정수를 실수형으로 인식하게한다.
		d = 100D;       //숫자 뒤에 d나 D를 붙이면 정수를 실수형으로 인식하게한다.

		//크기 비교 :
		//byte < short < int < long < float < double
		
		
		
		//논리 : 참과 거짓판단 true or false만 담을 수 있다
		boolean b2 = true;
		b2 = false;
		
		
		//문자표현 : char. '싱글 쿼티션을 이용해 표현    *주의* "더블쿼티션은 문자열
		//        한 문자를 표현     
		//아스키코드 : 문자에 대한 숫자
		char c = 'a'; //'a' -> 97
		System.out.println(c); //a 출력
		c = 97;
		System.out.println(c); //a 출력 c의 타입이 char이기때문에 int c = 'a' 는 97로 출력
//		c = '; //유니코드 : 다국어를 지원하기 위한 문자 인코딩 
		          // \u0000 : 총 네자리의 값을 줄 수 있다. 0값은 16진수
		c = '\u0061'; //16진법 97값이 나온다.
		System.out.println(c);
		//숫자가 0으로 시작하면 8진수 021
		//0x 로 시작하면 16진수
//		char 변수; 한글도 사용가능하다. 
		
		
		
		/*
		문제 1 : 정수를 더블형으로 만들려면 숫자뒤에 무엇을 붙여야하는가 ?
		*/
	}

}
